import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Header } from '../components/layout';
import { useCart } from '../contexts/CartContext';
import { useAuth } from '../contexts/AuthContext';
import { ordersAPI, walletAPI } from '../services/api';
import { OrderService } from '../services/orderService';
import { PaymentService } from '../services/paymentService';

const CheckoutPage = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { items, totalAmount, clearCart } = useCart();
  
  const [walletBalance, setWalletBalance] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [orderSuccess, setOrderSuccess] = useState(false);
  const [createdOrder, setCreatedOrder] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState('wallet');
  const [availablePaymentMethods, setAvailablePaymentMethods] = useState([]);

  // Redirect if not logged in
  useEffect(() => {
    if (!user) {
      navigate('/login');
    }
  }, [user, navigate]);

  // Redirect if cart is empty
  useEffect(() => {
    if (items.length === 0) {
      navigate('/cart');
    }
  }, [items, navigate]);

  // Fetch wallet balance and payment methods
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await walletAPI.getBalance();
        setWalletBalance(response.balance);
        
        const methods = PaymentService.getAvailablePaymentMethods();
        setAvailablePaymentMethods(methods);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    if (user) {
      fetchData();
    }
  }, [user]);

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(price) + ' ‚Ç´';
  };

  const handleCheckout = async () => {
    if (!user) {
      setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Group items by event and create orders
      const ordersByEvent = items.reduce((groups, item) => {
        if (!groups[item.eventId]) {
          groups[item.eventId] = [];
        }
        groups[item.eventId].push(item);
        return groups;
      }, {});

      const orderPromises = Object.entries(ordersByEvent).map(async ([eventId, eventItems]) => {
        const orderData = {
          ticketTypeId: eventItems[0].ticketTypeId,
          quantity: eventItems.reduce((sum, item) => sum + item.quantity, 0),
          seatNo: null
        };

        // Create order with inventory check
        const orderResult = await OrderService.createOrderWithInventoryCheck(orderData);
        
        // Process payment
        const paymentData = {
          amount: totalAmount,
          walletBalance,
          paymentMethod
        };

        const paymentResult = await OrderService.processOrderPayment(
          orderResult.order.orderId,
          paymentData
        );

        return paymentResult;
      });

      const completedOrders = await Promise.all(orderPromises);
      setCreatedOrder(completedOrders[0].order);
      setOrderSuccess(true);

      // Clear cart after successful order
      setTimeout(() => {
        clearCart();
        navigate('/my-tickets');
      }, 5000); // TƒÉng th·ªùi gian ƒë·ªÉ user ƒë·ªçc th√¥ng b√°o

    } catch (error) {
      console.error('Error processing checkout:', error);
      setError(error.message || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  if (orderSuccess) {
    return (
      <div>
        <Header />
        <div className="container p-4">
          <div className="checkout-success">
            <div className="success-card">
              <h1>ƒê·∫∑t h√†ng th√†nh c√¥ng!</h1>
              <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.</p>
              <p>M√£ ƒë∆°n h√†ng: <strong>{createdOrder?.orderId}</strong></p>
              
              <div className="ticket-info">
                <h3>V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o!</h3>
                <p>V√© ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o t√†i kho·∫£n c·ªßa b·∫°n</p>
                <p>B·∫°n c√≥ th·ªÉ xem v√© trong "My Tickets"</p>
                <p>V√© c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ check-in t·∫°i s·ª± ki·ªán</p>
              </div>
              
              <p className="redirect-info">
                ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang v√© c·ªßa b·∫°n trong 5 gi√¢y...
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <Header />
      <div className="container p-4">
        <div className="checkout-page">
          <h1>üí≥ Thanh to√°n</h1>
          
          {error && (
            <div className="alert alert-error">
              {error}
            </div>
          )}

          <div className="checkout-content">
            <div className="checkout-items">
              <h2>üìã ƒê∆°n h√†ng c·ªßa b·∫°n</h2>
              {items.map((item) => (
                <div key={item.ticketTypeId} className="checkout-item">
                  <div className="item-info">
                    <h4>{item.typeName}</h4>
                    <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
                  </div>
                  <div className="item-price">
                    {formatPrice(item.price * item.quantity)}
                  </div>
                </div>
              ))}
            </div>

            <div className="checkout-summary">
              <div className="summary-card">
                <h3>T√≥m t·∫Øt thanh to√°n</h3>
                
                <div className="summary-row">
                  <span>T·∫°m t√≠nh:</span>
                  <span>{formatPrice(totalAmount)}</span>
                </div>
                
                <div className="summary-row">
                  <span>Ph√≠ x·ª≠ l√Ω:</span>
                  <span>0 ‚Ç´</span>
                </div>
                
                <div className="summary-row total">
                  <span>T·ªïng c·ªông:</span>
                  <span>{formatPrice(totalAmount)}</span>
                </div>

                <div className="payment-methods">
                  <h4>üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                  {availablePaymentMethods.map((method) => (
                    <div key={method.id} className="payment-method">
                      <label className="payment-method-label">
                        <input
                          type="radio"
                          name="paymentMethod"
                          value={method.id}
                          checked={paymentMethod === method.id}
                          onChange={(e) => setPaymentMethod(e.target.value)}
                          disabled={!method.enabled}
                        />
                        <span className="payment-method-info">
                          <span className="payment-icon">{method.icon}</span>
                          <span className="payment-name">{method.name}</span>
                          <span className="payment-description">{method.description}</span>
                        </span>
                      </label>
                    </div>
                  ))}
                </div>

                <div className="wallet-info">
                  <p><strong>S·ªë d∆∞ v√≠:</strong> {formatPrice(walletBalance)}</p>
                  {paymentMethod === 'wallet' && totalAmount > walletBalance && (
                    <p className="insufficient-balance">
                      ‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß. <a href="/wallet">N·∫°p th√™m ti·ªÅn</a>
                    </p>
                  )}
                </div>

                <button 
                  className="btn btn-primary checkout-btn"
                  onClick={handleCheckout}
                  disabled={loading || (paymentMethod === 'wallet' && totalAmount > walletBalance)}
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n thanh to√°n'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;
