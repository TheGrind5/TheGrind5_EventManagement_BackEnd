---
description: "Integration & Consistency Rules - Đảm bảo tính nhất quán và chính xác trong code"
alwaysApply: false
---
# Integration & Consistency Rules

## Nguyên tắc cốt lõi
- **Tính nhất quán (Consistency)** phải được ưu tiên số 1
- **Sự chính xác (Accuracy)** phải được ưu tiên số 1
- Mỗi khi code hay sửa đổi code, bắt buộc phải kiểm tra phạm vi ảnh hưởng
- Tránh gây ra lỗi không đồng nhất code
- Khi merge code, tự động check để sửa các lỗi và đồng bộ code

## Quy tắc kiểm tra phạm vi ảnh hưởng

### 1. Trước khi sửa đổi bất kỳ code nào:
- Phân tích tất cả file liên quan (dependencies, references)
- Kiểm tra naming conventions trong toàn bộ project
- Xác định impact scope trước khi thay đổi
- Kiểm tra API contracts giữa Frontend và Backend
- Verify database schema consistency

### 2. Kiểm tra tính nhất quán:
- **Naming Convention**: camelCase, PascalCase, snake_case phải thống nhất
- **File Structure**: Controllers, Services, Models, DTOs phải đồng bộ
- **API Endpoints**: URL patterns, HTTP methods, response formats
- **Database**: Table names, column names, relationships
- **Authentication**: JWT flow, token handling, security

## Kiểm tra Integration

### Backend ↔ Frontend:
- API endpoints consistency
- Request/Response DTOs mapping
- Error handling patterns
- Authentication flow
- CORS configuration

### Database Integration:
- Entity relationships consistency
- Migration compatibility
- Data validation rules
- Foreign key constraints

### Service Layer Integration:
- Repository pattern implementation
- Service dependencies injection
- Exception handling consistency
- Logging patterns

## Auto-fix khi merge code

### Tự động detect và fix:
- **Import/Using statements** conflicts
- **Dependency injection** mismatches
- **API endpoint** inconsistencies
- **Database schema** conflicts
- **Authentication** flow breaks

### Sync operations:
- **Naming conventions** across layers
- **API contracts** between Frontend-Backend
- **Database relationships** consistency
- **Error handling** patterns
- **Security** implementations

## Áp dụng cho Event Management Project

### Kiểm tra cụ thể:
1. **AuthService ↔ AuthController** consistency
2. **DTOs ↔ Models** mapping chính xác
3. **Frontend API calls** ↔ Backend endpoints
4. **Database relationships** (User, Event, Order, Ticket)
5. **JWT token flow** end-to-end
6. **CORS configuration** Frontend-Backend
7. **Swagger documentation** accuracy

### Naming Convention Rules:
- **Controllers**: `[Name]Controller.cs`
- **Services**: `[Name]Service.cs`
- **DTOs**: `[Name]DTOs.cs` hoặc `[Name]Dto.cs`
- **Models**: `[Name].cs`
- **Repositories**: `I[Name]Repository.cs`, `[Name]Repository.cs`

## Lỗi thường gặp cần tránh:
- Inconsistent naming between layers
- API endpoint mismatches
- Database relationship breaks
- Authentication flow inconsistencies
- CORS configuration errors
- Missing dependency injections
- Incomplete error handling
- Swagger documentation gaps

## Khi phát hiện lỗi integration:
1. **STOP** - Không tiếp tục code
2. **ANALYZE** - Phân tích root cause
3. **FIX** - Sửa tất cả related issues
4. **VERIFY** - Test toàn bộ flow
5. **DOCUMENT** - Ghi lại changes
