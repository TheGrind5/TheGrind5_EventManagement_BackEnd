---
alwaysApply: false
---
# KISS Rule - Keep It Simple, Stupid

## Nguyên tắc cơ bản:
- **ƯU TIÊN CHẠY ĐƯỢC** - Code không chạy được = vô nghĩa. Luôn đảm bảo code có thể chạy trước khi tối ưu
- **Đơn giản hóa mọi thứ** - Nếu code phức tạp, hãy chia nhỏ ra
- **Một chức năng = một method** - Không làm quá nhiều việc trong một function
- **Một lớp = một trách nhiệm** - Mỗi class chỉ làm đúng chức năng của nó, không "ôm" quá nhiều việc
- **Tên biến rõ ràng** - `userName` thay vì `u` hoặc `usr`
- **Ít dependency** - Chỉ import những gì thực sự cần
- **Code dễ đọc** - Người khác phải hiểu được ngay lập tức

## Quy tắc viết code:
1. **CHẠY ĐƯỢC TRƯỚC TIÊN** - Code phải compile và chạy được trước khi làm gì khác
2. **Không over-engineering** - Giải pháp đơn giản nhất thường là tốt nhất
3. **Tránh nested quá sâu** - Tối đa 3 levels if/for
4. **Comment khi cần thiết** - Nhưng code phải tự giải thích
5. **Refactor thường xuyên** - Nếu thấy lặp lại, tạo function
6. **Test đơn giản** - Một test = một case
7. **Phân chia trách nhiệm rõ ràng** - Controller chỉ xử lý HTTP, Service chỉ xử lý business logic, Repository chỉ truy cập data

## Quy tắc "Chạy được":
- **Test ngay sau khi viết** - Không commit code chưa test
- **Fix lỗi compile trước** - Không làm gì khác khi có lỗi
- **Build thành công** - Đảm bảo project build được
- **Chạy được cơ bản** - Ít nhất phải chạy được với data mẫu
- **Không bỏ qua warning** - Fix warning trước khi tiếp tục

## Phân chia trách nhiệm rõ ràng:
- **Controller**: Chỉ xử lý HTTP request/response
- **Service**: Chỉ xử lý business logic
- **Repository**: Chỉ truy cập database

## Nguyên tắc quan trọng: 
- **Code không chạy được = VÔ NGHĨA** - Ưu tiên chạy được trước mọi thứ khác
- **Code phức tạp = Bug phức tạp** - Code đơn giản = Dễ sửa, dễ hiểu
- **Mỗi lớp một việc** - Controller chỉ xử lý HTTP, Service chỉ xử lý business logic, Repository chỉ truy cập data
- **Chạy được + Đơn giản + Phân chia rõ ràng = Hoàn hảo** - Đây là mục tiêu cuối cùng
