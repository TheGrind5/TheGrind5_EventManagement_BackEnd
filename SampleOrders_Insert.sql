-- ========================================
-- TheGrind5 Event Management
-- Sample Orders Insert Script
-- ========================================
-- 
-- Script n√†y t·∫°o 4 orders m·∫´u ƒë·ªÉ test t√≠nh nƒÉng Qu·∫£n l√Ω Order
-- C·∫ßn ch·∫°y SampleData_Insert.sql tr∆∞·ªõc ƒë·ªÉ c√≥ Users, Events v√† TicketTypes
-- ========================================

USE EventDB
GO

-- ========================================
-- VERIFY PREREQUISITES
-- ========================================
-- Ki·ªÉm tra xem ƒë√£ c√≥ Users, Events v√† TicketTypes ch∆∞a
IF NOT EXISTS (SELECT 1 FROM [User] WHERE Role = 'Customer')
BEGIN
    PRINT '‚ö†Ô∏è ERROR: Ch∆∞a c√≥ Customer trong database. Vui l√≤ng ch·∫°y SampleData_Insert.sql tr∆∞·ªõc!';
    RETURN;
END

IF NOT EXISTS (SELECT 1 FROM Event)
BEGIN
    PRINT '‚ö†Ô∏è ERROR: Ch∆∞a c√≥ Event trong database. Vui l√≤ng ch·∫°y SampleData_Insert.sql tr∆∞·ªõc!';
    RETURN;
END

IF NOT EXISTS (SELECT 1 FROM TicketType)
BEGIN
    PRINT '‚ö†Ô∏è ERROR: Ch∆∞a c√≥ TicketType trong database. Vui l√≤ng ch·∫°y SampleData_Insert.sql tr∆∞·ªõc!';
    RETURN;
END

PRINT '‚úÖ Prerequisites check passed. Starting to insert sample orders...';
GO

-- ========================================
-- CLEAR EXISTING ORDERS (Optional - comment out if you want to keep existing orders)
-- ========================================
-- DELETE FROM Payment;
-- DELETE FROM Ticket;
-- DELETE FROM OrderItem;
-- DELETE FROM [Order];
-- DBCC CHECKIDENT ('Payment', RESEED, 0);
-- DBCC CHECKIDENT ('Ticket', RESEED, 0);
-- DBCC CHECKIDENT ('OrderItem', RESEED, 0);
-- DBCC CHECKIDENT ('[Order]', RESEED, 0);
-- PRINT 'Cleared existing orders';
GO

-- ========================================
-- INSERT SAMPLE ORDERS
-- ========================================
-- L·∫•y EventId v√† TicketTypeId t·ª´ database d·ª±a tr√™n Title v√† TypeName

-- Ki·ªÉm tra v√† hi·ªÉn th·ªã Events c√≥ s·∫µn
PRINT 'üìã Checking available Events...';
SELECT EventId, Title FROM Event ORDER BY EventId;
PRINT '';

-- Order 1: Customer 1 mua Event 1 - V√© Th∆∞·ªùng (2 v√©)
DECLARE @OrderId1 INT;
DECLARE @CustomerId1 INT;
DECLARE @EventId1 INT;
DECLARE @TicketTypeId1 INT;

SELECT @CustomerId1 = UserId FROM [User] WHERE Email = 'customer1@example.com';
SELECT @EventId1 = EventId FROM Event WHERE Title = N'Workshop L·∫≠p Tr√¨nh Web';
SELECT @TicketTypeId1 = TicketTypeId FROM TicketType WHERE EventId = @EventId1 AND TypeName = N'V√© Th∆∞·ªùng';

IF @CustomerId1 IS NULL OR @EventId1 IS NULL OR @TicketTypeId1 IS NULL
BEGIN
    PRINT '‚ö†Ô∏è ERROR Order 1: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt!';
    PRINT '   CustomerId: ' + ISNULL(CAST(@CustomerId1 AS VARCHAR), 'NULL');
    PRINT '   EventId: ' + ISNULL(CAST(@EventId1 AS VARCHAR), 'NULL');
    PRINT '   TicketTypeId: ' + ISNULL(CAST(@TicketTypeId1 AS VARCHAR), 'NULL');
END
ELSE
BEGIN
    INSERT INTO [Order] (CustomerId, EventId, Amount, Status, PaymentMethod, CreatedAt, UpdatedAt)
    VALUES (
        @CustomerId1,
        @EventId1,
        300000.00,
        'Paid',
        'Wallet',
        DATEADD(day, -5, GETUTCDATE()),
        DATEADD(day, -5, GETUTCDATE())
    );

    SET @OrderId1 = SCOPE_IDENTITY();

    IF @OrderId1 IS NOT NULL
    BEGIN
        INSERT INTO OrderItem (OrderId, TicketTypeId, Quantity, SeatNo, Status)
        VALUES (@OrderId1, @TicketTypeId1, 2, NULL, 'Confirmed');
        
        PRINT '‚úÖ Inserted Order 1: Customer 1 - Workshop L·∫≠p Tr√¨nh Web - V√© Th∆∞·ªùng (2 v√©) - 300,000 VND';
    END
    ELSE
    BEGIN
        PRINT '‚ùå Failed to insert Order 1';
    END
END
GO

-- Order 2: Customer 2 mua Event 1 - V√© VIP (1 v√©)
DECLARE @OrderId2 INT;
DECLARE @CustomerId2 INT;
DECLARE @EventId1_2 INT;
DECLARE @TicketTypeId2 INT;

SELECT @CustomerId2 = UserId FROM [User] WHERE Email = 'customer2@example.com';
SELECT @EventId1_2 = EventId FROM Event WHERE Title = N'Workshop L·∫≠p Tr√¨nh Web';
SELECT @TicketTypeId2 = TicketTypeId FROM TicketType WHERE EventId = @EventId1_2 AND TypeName = N'V√© VIP';

IF @CustomerId2 IS NULL OR @EventId1_2 IS NULL OR @TicketTypeId2 IS NULL
BEGIN
    PRINT '‚ö†Ô∏è ERROR Order 2: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt!';
    PRINT '   CustomerId: ' + ISNULL(CAST(@CustomerId2 AS VARCHAR), 'NULL');
    PRINT '   EventId: ' + ISNULL(CAST(@EventId1_2 AS VARCHAR), 'NULL');
    PRINT '   TicketTypeId: ' + ISNULL(CAST(@TicketTypeId2 AS VARCHAR), 'NULL');
END
ELSE
BEGIN
    INSERT INTO [Order] (CustomerId, EventId, Amount, Status, PaymentMethod, CreatedAt, UpdatedAt)
    VALUES (
        @CustomerId2,
        @EventId1_2,
        250000.00,
        'Paid',
        'Wallet',
        DATEADD(day, -3, GETUTCDATE()),
        DATEADD(day, -3, GETUTCDATE())
    );

    SET @OrderId2 = SCOPE_IDENTITY();

    IF @OrderId2 IS NOT NULL
    BEGIN
        INSERT INTO OrderItem (OrderId, TicketTypeId, Quantity, SeatNo, Status)
        VALUES (@OrderId2, @TicketTypeId2, 1, 'A-12', 'Confirmed');
        
        PRINT '‚úÖ Inserted Order 2: Customer 2 - Workshop L·∫≠p Tr√¨nh Web - V√© VIP (1 v√©) - 250,000 VND';
    END
    ELSE
    BEGIN
        PRINT '‚ùå Failed to insert Order 2';
    END
END
GO

-- Order 3: Customer 1 mua Event 2 - V√© Premium (1 v√©)
DECLARE @OrderId3 INT;
DECLARE @CustomerId1_3 INT;
DECLARE @EventId2_3 INT;
DECLARE @TicketTypeId3 INT;

SELECT @CustomerId1_3 = UserId FROM [User] WHERE Email = 'customer1@example.com';
SELECT @EventId2_3 = EventId FROM Event WHERE Title = N'H·ªôi Th·∫£o AI & Machine Learning';
SELECT @TicketTypeId3 = TicketTypeId FROM TicketType WHERE EventId = @EventId2_3 AND TypeName = N'V√© Premium';

IF @CustomerId1_3 IS NULL OR @EventId2_3 IS NULL OR @TicketTypeId3 IS NULL
BEGIN
    PRINT '‚ö†Ô∏è ERROR Order 3: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt!';
    PRINT '   CustomerId: ' + ISNULL(CAST(@CustomerId1_3 AS VARCHAR), 'NULL');
    PRINT '   EventId: ' + ISNULL(CAST(@EventId2_3 AS VARCHAR), 'NULL');
    PRINT '   TicketTypeId: ' + ISNULL(CAST(@TicketTypeId3 AS VARCHAR), 'NULL');
END
ELSE
BEGIN
    INSERT INTO [Order] (CustomerId, EventId, Amount, Status, PaymentMethod, CreatedAt, UpdatedAt)
    VALUES (
        @CustomerId1_3,
        @EventId2_3,
        350000.00,
        'Paid',
        'Wallet',
        DATEADD(day, -2, GETUTCDATE()),
        DATEADD(day, -2, GETUTCDATE())
    );

    SET @OrderId3 = SCOPE_IDENTITY();

    IF @OrderId3 IS NOT NULL
    BEGIN
        INSERT INTO OrderItem (OrderId, TicketTypeId, Quantity, SeatNo, Status)
        VALUES (@OrderId3, @TicketTypeId3, 1, NULL, 'Confirmed');
        
        PRINT '‚úÖ Inserted Order 3: Customer 1 - H·ªôi Th·∫£o AI & Machine Learning - V√© Premium (1 v√©) - 350,000 VND';
    END
    ELSE
    BEGIN
        PRINT '‚ùå Failed to insert Order 3';
    END
END
GO

-- Order 4: Customer 2 mua Event 3 - V√© Th∆∞·ªùng (2 v√©)
DECLARE @OrderId4 INT;
DECLARE @CustomerId2_4 INT;
DECLARE @EventId3_4 INT;
DECLARE @TicketTypeId4 INT;

SELECT @CustomerId2_4 = UserId FROM [User] WHERE Email = 'customer2@example.com';
SELECT @EventId3_4 = EventId FROM Event WHERE Title = N'S·ª± Ki·ªán Networking Startup';
SELECT @TicketTypeId4 = TicketTypeId FROM TicketType WHERE EventId = @EventId3_4 AND TypeName = N'V√© Th∆∞·ªùng';

IF @CustomerId2_4 IS NULL OR @EventId3_4 IS NULL OR @TicketTypeId4 IS NULL
BEGIN
    PRINT '‚ö†Ô∏è ERROR Order 4: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt!';
    PRINT '   CustomerId: ' + ISNULL(CAST(@CustomerId2_4 AS VARCHAR), 'NULL');
    PRINT '   EventId: ' + ISNULL(CAST(@EventId3_4 AS VARCHAR), 'NULL');
    PRINT '   TicketTypeId: ' + ISNULL(CAST(@TicketTypeId4 AS VARCHAR), 'NULL');
END
ELSE
BEGIN
    INSERT INTO [Order] (CustomerId, EventId, Amount, Status, PaymentMethod, CreatedAt, UpdatedAt)
    VALUES (
        @CustomerId2_4,
        @EventId3_4,
        600000.00,
        'Paid',
        'Wallet',
        DATEADD(day, -1, GETUTCDATE()),
        DATEADD(day, -1, GETUTCDATE())
    );

    SET @OrderId4 = SCOPE_IDENTITY();

    IF @OrderId4 IS NOT NULL
    BEGIN
        INSERT INTO OrderItem (OrderId, TicketTypeId, Quantity, SeatNo, Status)
        VALUES (@OrderId4, @TicketTypeId4, 2, NULL, 'Confirmed');
        
        PRINT '‚úÖ Inserted Order 4: Customer 2 - S·ª± Ki·ªán Networking Startup - V√© Th∆∞·ªùng (2 v√©) - 600,000 VND';
    END
    ELSE
    BEGIN
        PRINT '‚ùå Failed to insert Order 4';
    END
END
GO

-- ========================================
-- VERIFICATION QUERIES
-- ========================================

PRINT '';
PRINT '========================================';
PRINT 'VERIFICATION - Sample Orders Created';
PRINT '========================================';
PRINT '';

-- T·ªïng s·ªë orders
SELECT 'Total Orders:' as Info, COUNT(*) as Count FROM [Order];
PRINT '';

-- Chi ti·∫øt orders v·ªõi th√¥ng tin kh√°ch h√†ng v√† s·ª± ki·ªán (bao g·ªìm s·ªë l∆∞·ª£ng v√©)
SELECT 
    o.OrderId as 'ID V√©',
    u.FullName as 'T√™n ng∆∞·ªùi mua',
    u.Email as 'Email',
    e.Title as 'S·ª± ki·ªán',
    STUFF((
        SELECT ', ' + tt2.TypeName + ' (' + CAST(oi2.Quantity AS VARCHAR) + ' v√©)'
        FROM OrderItem oi2
        INNER JOIN TicketType tt2 ON oi2.TicketTypeId = tt2.TicketTypeId
        WHERE oi2.OrderId = o.OrderId
        FOR XML PATH('')
    ), 1, 2, '') as 'V√© ƒë√£ mua',
    (SELECT SUM(oi3.Quantity) FROM OrderItem oi3 WHERE oi3.OrderId = o.OrderId) as 'S·ªë l∆∞·ª£ng v√©',
    FORMAT(o.Amount, 'N0') + ' VND' as 'S·ªë ti·ªÅn',
    o.Status as 'Tr·∫°ng th√°i',
    FORMAT(o.CreatedAt, 'dd/MM/yyyy HH:mm') as 'Th·ªùi gian mua'
FROM [Order] o
INNER JOIN [User] u ON o.CustomerId = u.UserId
INNER JOIN Event e ON o.EventId = e.EventId
GROUP BY o.OrderId, u.FullName, u.Email, e.Title, o.Amount, o.Status, o.CreatedAt
ORDER BY o.OrderId;

PRINT '';
PRINT '========================================';
PRINT '‚úÖ Sample Orders Insertion Complete!';
PRINT '========================================';
PRINT '';
PRINT 'üìã T√≥m t·∫Øt 4 orders ƒë√£ t·∫°o:';
PRINT '   1. Order #1: L√™ VƒÉn Customer - Workshop L·∫≠p Tr√¨nh Web - V√© Th∆∞·ªùng (2 v√©) - 300,000 VND';
PRINT '   2. Order #2: Ph·∫°m Th·ªã Test - Workshop L·∫≠p Tr√¨nh Web - V√© VIP (1 v√©) - 250,000 VND';
PRINT '   3. Order #3: L√™ VƒÉn Customer - H·ªôi Th·∫£o AI & Machine Learning - V√© Premium (1 v√©) - 350,000 VND';
PRINT '   4. Order #4: Ph·∫°m Th·ªã Test - S·ª± Ki·ªán Networking Startup - V√© Th∆∞·ªùng (2 v√©) - 600,000 VND';
PRINT '';
PRINT 'üåê B√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p trang Qu·∫£n l√Ω Order ƒë·ªÉ xem d·ªØ li·ªáu!';

