@startuml Complete Payment System Sequence Diagram
!theme plain
title Complete Payment System Sequence Diagram

actor User as U
actor Admin as A
participant "Frontend" as F
participant "OrderController" as OC
participant "WalletController" as WC
participant "IOrderService" as OS
participant "IWalletService" as WS
participant "UserRepository" as UR
participant "EventDBContext" as DB

== Complete Payment System Flow ==

== 1. Wallet Deposit Flow ==
U -> F: Deposit to Wallet
F -> WC: POST /api/wallet/deposit
WC -> WS: DepositAsync(userId, amount, description, referenceId)
WS -> UR: GetUserByIdAsync(userId)
UR -> DB: Query User
DB -> UR: Return User
UR -> WS: Return User
WS -> WS: Begin Transaction
WS -> WS: Calculate new balance (balanceAfter = balanceBefore + amount)
WS -> UR: UpdateUserAsync(user)
UR -> DB: Update User.WalletBalance
DB -> UR: Confirm update
WS -> WS: Create WalletTransaction (Type: "Deposit")
WS -> DB: Add WalletTransaction
WS -> WS: Commit Transaction
WS -> WC: Return WalletTransaction
WC -> F: 200 OK
F -> U: Show deposit success

== 2. Order Payment Flow ==
U -> F: Pay Order
F -> OC: POST /api/order/{id}/payment
OC -> OS: GetOrderByIdAsync(id)
OS -> DB: Query Order
DB -> OS: Return Order
OS -> OC: Return OrderDTO
OC -> OC: Validate order ownership and status
OC -> WS: HasSufficientBalanceAsync(userId, order.Amount)
WS -> UR: GetUserByIdAsync(userId)
UR -> DB: Query User
DB -> UR: Return User
UR -> WS: Return User.WalletBalance
WS -> OC: Return boolean result

alt Insufficient balance
    OC -> F: 400 Bad Request
    F -> U: Show insufficient balance error
else Sufficient balance
    OC -> WS: ProcessPaymentAsync(userId, amount, orderId, description)
    WS -> UR: GetUserByIdAsync(userId)
    UR -> DB: Query User
    DB -> UR: Return User
    UR -> WS: Return User
    WS -> WS: Begin Transaction
    WS -> WS: Calculate new balance (balanceAfter = balanceBefore - amount)
    WS -> UR: UpdateUserAsync(user)
    UR -> DB: Update User.WalletBalance
    DB -> UR: Confirm update
    WS -> WS: Create WalletTransaction (Type: "Payment")
    WS -> DB: Add WalletTransaction
    WS -> WS: Commit Transaction
    WS -> OC: Return WalletTransaction
    OC -> OS: UpdateOrderStatusAsync(orderId, "Paid")
    OS -> DB: Update Order.Status = "Paid"
    DB -> OS: Confirm update
    OS -> OC: Return success
    OC -> F: 200 OK
    F -> U: Show payment success
end

== 3. Refund Flow ==
A -> F: Refund Order
F -> OC: POST /api/order/{id}/refund
OC -> OC: Validate admin role
OC -> WS: ProcessRefundAsync(userId, refundAmount, orderId, description)
WS -> UR: GetUserByIdAsync(userId)
UR -> DB: Query User
DB -> UR: Return User
UR -> WS: Return User
WS -> WS: Begin Transaction
WS -> WS: Calculate new balance (balanceAfter = balanceBefore + refundAmount)
WS -> UR: UpdateUserAsync(user)
UR -> DB: Update User.WalletBalance
DB -> UR: Confirm update
WS -> WS: Create WalletTransaction (Type: "Refund")
WS -> DB: Add WalletTransaction
WS -> WS: Commit Transaction
WS -> OC: Return WalletTransaction
OC -> F: 200 OK
F -> A: Show refund success

== 4. Wallet Withdrawal Flow ==
U -> F: Withdraw from Wallet
F -> WC: POST /api/wallet/withdraw
WC -> WS: WithdrawAsync(userId, amount, description, referenceId)
WS -> UR: GetUserByIdAsync(userId)
UR -> DB: Query User
DB -> UR: Return User
UR -> WS: Return User
WS -> WS: Check balance >= amount
alt Insufficient balance
    WS -> WC: Throw InvalidOperationException
    WC -> F: 400 Bad Request
    F -> U: Show insufficient balance error
else Sufficient balance
    WS -> WS: Begin Transaction
    WS -> WS: Calculate new balance (balanceAfter = balanceBefore - amount)
    WS -> UR: UpdateUserAsync(user)
    UR -> DB: Update User.WalletBalance
    DB -> UR: Confirm update
    WS -> WS: Create WalletTransaction (Type: "Withdraw")
    WS -> DB: Add WalletTransaction
    WS -> WS: Commit Transaction
    WS -> WC: Return WalletTransaction
    WC -> F: 200 OK
    F -> U: Show withdrawal success
end

== Key Business Rules Summary ==

note over WS: 1. All transactions are atomic (Begin/Commit/Rollback)
note over WS: 2. Balance tracking with BalanceBefore/BalanceAfter
note over WS: 3. Transaction types: Deposit, Withdraw, Payment, Refund
note over OC: 4. Order ownership and status validation
note over OC: 5. Admin role validation for refunds
note over WS: 6. Sufficient balance validation for payments/withdrawals
note over WS: 7. User existence validation
note over WS: 8. Amount validation (must be > 0)

@enduml
