@startuml Register_Sequence_Diagram
!theme plain
title 1.0 Register

participant "User" as User
participant "Browser/Frontend" as Browser
participant "AuthController" as Controller
participant "AuthService" as Service
participant "UserRepository" as Repository
participant "Database" as Database
participant "PasswordService" as PasswordService
participant "UserMapper" as Mapper

note over User, Mapper: Register Flow - Successful Path

User -> Browser: "Enter registration details"
Browser -> Controller: 1. POST /api/auth/register\n{ username, email, password, fullName, phone, avatar, dateOfBirth, gender }

Controller -> Controller: 2. [Try-Catch Block]
Controller -> Repository: 4. IsEmailExistsAsync(email)
    Repository -> Database: 5. SELECT COUNT(*) FROM Users WHERE Email = @email
    Database --> Repository: 6. count result
    Repository --> Controller: 7. boolean (false = email not exists)
    
alt [Email already exists]
    Controller --> Browser: 8. 400 Bad Request\n(message: "Email này đã được sử dụng")
    Browser --> User: "Show 'Email already exists'"
else [Email available]
        Controller -> Service: 9. RegisterAsync(RegisterRequest)
        
        Service -> PasswordService: 10. HashPassword(password)
        PasswordService --> Service: 11. hashedPassword
        
        Service -> Mapper: 12. MapFromRegisterRequest(RegisterRequest, hashedPassword)
        Mapper --> Service: 13. User entity\n(with default values: Role="Customer", WalletBalance=0)
        
        Service -> Repository: 14. CreateUserAsync(User)
        Repository -> Database: 15. INSERT INTO Users\n(Username, FullName, Email, PasswordHash, Phone, Role, CreatedAt, Avatar, DateOfBirth, Gender, WalletBalance)
        Database --> Repository: 16. User data with generated UserId
        Repository --> Service: 17. User entity (with UserId)
        
        Service -> Mapper: 18. MapToUserReadDto(User)
        Mapper --> Service: 19. UserReadDto\n(UserId, FullName, Email, Phone, Role, WalletBalance, Avatar)
        
        Service --> Controller: 20. UserReadDto
        
    Controller -> Controller: 21. CreateRegisterResponse(UserReadDto)
    Controller --> Browser: 22. 200 OK\n{ message: "Đăng ký thành công", user: UserReadDto }
    Browser --> User: "Show 'Registration successful'"
end

note over User, Mapper: Error Handling Flows

alt [Database error - Alternative Flow]
    note over Repository, Database: Database operation fails
    Repository --> Service: 23. Exception
    Service --> Controller: 24. Exception
    Controller --> Browser: 25. 400 Bad Request\n{ message: "Có lỗi xảy ra khi đăng ký", error: exception details }
    Browser --> User: "Show 'Registration failed'"
end

alt [Invalid request data - Alternative Flow]
    note over Controller: Request validation fails
    Controller --> Browser: 26. 400 Bad Request\n{ message: "Dữ liệu không hợp lệ" }
    Browser --> User: "Show 'Invalid data'"
end

@enduml
